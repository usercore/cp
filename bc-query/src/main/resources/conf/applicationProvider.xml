<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--<bean id="yamlProperties" class="org.springframework.beans.factory.config.YamlPropertiesFactoryBean">-->
        <!--<property name="resources" value="classpath:application-*.yml"/>-->
    <!--</bean>-->

    <!--<context:property-placeholder properties-ref="yamlProperties"/>-->
    <context:property-placeholder location="classpath:conf/*.properties"/>
    <context:component-scan base-package="com.bc"/>
    <dubbo:application name="bc-query"/>
    <!-- 本机 伪集群 测试      -->
    <!--  <dubbo:registry  protocol="zookeeper"  address="${address}"  />
        <dubbo:protocol name="dubbo" port="${dubboPort}" />
         <dubbo:provider delay="-1" timeout="10000" retries="0"/>
        和本地bean一样实现服务
     <dubbo:service  interface="com.qbb.data.service.IBaseService" ref="baseService"/>        -->

    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${mysql.driverclass}"></property>
        <property name="jdbcUrl" value="${mysql.jdbcurl}"></property>
        <property name="user" value="${mysql.user}"></property>
        <property name="password" value="${mysql.password}"></property>
        <property name="acquireIncrement" value="5"></property>  当连接池中的连接用完时，C3P0一次性创建新连接的数目2
        <property name="initialPoolSize" value="10"></property>  初始化时创建的连接数，必须在minPoolSize和maxPoolSize之间
        <property name="minPoolSize" value="5"></property>
        <property name="maxPoolSize" value="20"></property>
        最大空闲时间，超过空闲时间的连接将被丢弃 [需要注意：mysql默认的连接时长为8小时(28800）【可在my.ini中添加 wait_timeout=30(单位秒)设置连接超时】,这里设置c3p0的超时必须<28800]
        <property name="maxIdleTime" value="300"></property>
        <property name="idleConnectionTestPeriod" value="60"></property> 每60秒检查连接池中的空闲连接
        <property name="maxStatements" value="20"></property>  jdbc的标准参数 用以控制数据源内加载的PreparedStatement数量，但由于预缓存的Statement属 于单个Connection而不是整个连接
    </bean>

    <bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${mysql1.driverclass}"></property>
        <property name="jdbcUrl" value="${mysql1.jdbcurl}"></property>
        <property name="user" value="${mysql1.user}"></property>
        <property name="password" value="${mysql1.password}"></property>
        <property name="acquireIncrement" value="5"></property>  当连接池中的连接用完时，C3P0一次性创建新连接的数目2
        <property name="initialPoolSize" value="10"></property>  初始化时创建的连接数，必须在minPoolSize和maxPoolSize之间
        <property name="minPoolSize" value="5"></property>
        <property name="maxPoolSize" value="20"></property>
        <property name="maxIdleTime" value="300"></property>
        <property name="idleConnectionTestPeriod" value="60"></property> 每60秒检查连接池中的空闲连接
        <property name="maxStatements" value="20"></property>  jdbc的标准参数 用以控制数据源内加载的PreparedStatement数量，但由于预缓存的Statement属 于单个Connection而不是整个连接
    </bean> -->

    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close" primary="true">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="200"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="defaultAutoCommit" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <!-- <property name="maxPoolPreparedStatementPerConnectionSize"
            value="20" /> -->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="config,stat"/>
        <property name="connectionProperties" value="config.decrypt=true"/>
    </bean>

    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url1}"/>
        <property name="username" value="${jdbc.username1}"/>
        <property name="password" value="${jdbc.password1}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="200"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="defaultAutoCommit" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <!-- <property name="maxPoolPreparedStatementPerConnectionSize"
            value="20" /> -->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="config,stat"/>
        <property name="connectionProperties" value="config.decrypt=true"/>
    </bean>

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource1"></property>
    </bean>

    <context:component-scan base-package="com.bc"></context:component-scan>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>

    <bean id="jdbcTemplateSave" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource1"/>
        </property>
    </bean>
</beans>